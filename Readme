Demonstrates CRUD operations via the implementation of a DAO and the use of EntityManager to communicate with MySQL database. We mark our DAO implementation as @Repository (a specialized version of @Component) to let exceptions being thrown by the JPA persistence providers be converted into Springâ€™s DataAccessException hierarchy. We provide connection details to a MySQL database in the app.properties file. Any methods that make potential changes to the database object need to be marked with @Transactional. Our @Entity here is Student, which maps Student directly to a database table. We specify the details in the student class - @Table(name = "student") sets our database table name as Student, @Id maps the id field as the primary key, with @GeneratedValue(strategy = GenerationType.IDENTITY) defining our key generation strategy (auto increment in this case). Finally, we let Spring know what we want our table @Columns to be. In this case, each field is a new column. 
